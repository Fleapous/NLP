@using MudBlazor.Utilities
<MudField InnerPadding="@InnerPadding" Class="@FieldClass" Style="@($"width: {Width}")"
          Label="@Label" Variant="Variant.Outlined" HelperText="@HelperText"
          Adornment="@Adornment" AdornmentIcon="@AdornmentIcon" AdornmentText="@AdornmentText"
          AdornmentColor="@AdornmentColor" OnAdornmentClick="@OnAdornmentClick" FullWidth="@FullWidth">
    <div style="text-align: center; overflow-x: auto">
        @if (ChildContent is not null)
        {
            @ChildContent
        }
    </div>
</MudField>

@code {
    private string FieldClass =>
        new CssBuilder("field")
            .AddClass("d-none", when: Hidden)
            .AddClass("d-inline", when: !Hidden)
            .AddClass("flex-auto", when: Flex)
            .AddClass("flex-grow-1", when: !Flex)
            .AddClass("flex-shrink-0")
            .AddClass(Class)
            .Build();

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public string Width { get; set; } = "10rem";
    [Parameter] public string? HelperText { get; set; }
    [Parameter] public bool FullWidth { get; set; }
    [Parameter] public bool Flex { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string? AdornmentIcon { get; set; }
    [Parameter] public string? AdornmentText { get; set; }
    [Parameter] public Adornment Adornment { get; set; } = Adornment.None;
    [Parameter] public Color AdornmentColor { get; set; } = Color.Default;
    [Parameter] public Size IconSize { get; set; } = Size.Medium;
    [Parameter] public EventCallback<MouseEventArgs> OnAdornmentClick { get; set; }
    [Parameter] public bool InnerPadding { get; set; }
    [Parameter] public bool Hidden { get; set; }
}